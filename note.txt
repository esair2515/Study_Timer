ONE=========================================================================================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Study Timer</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Study Timer</h1>
        <div class="time-settings">
            <label for="studyTime">Study Time (minutes):</label>
            <input type="number" id="studyTime" value="25" min="1" max="120">
            <label for="breakTime">Break Time (minutes):</label>
            <input type="number" id="breakTime" value="5" min="1" max="60">
        </div>
        <div id="timer">25:00</div>
        <div id="progressBarContainer">
            <progress id="progressBar" value="0" max="100"></progress>
        </div>
        <div class="buttons">
            <button id="startBtn">Start</button>
            <button id="pauseBtn">Pause</button>
            <button id="resetBtn">Reset</button>
        </div>
        <div id="logContainer">
            <h2>Session Log</h2>
            <ul id="logList"></ul>
        </div>
        <button id="settingsBtn">Settings</button>
        <div id="notification"></div>
        <div id="settingsModal" class="modal">
            <div class="modal-content">
                <span class="closeBtn">&times;</span>
                <h2>Settings</h2>
                <label for="soundSelect">Notification Sound:</label>
                <select id="soundSelect">
                    <option value="bell.mp3">Bell</option>
                    <option value="chime.mp3">Chime</option>
                    <option value="alert.mp3">Alert</option>
                </select>
                <br><br>
                <label for="themeSelect">Theme:</label>
                <select id="themeSelect">
                    <option value="light">Light</option>
                    <option value="dark">Dark</option>
                </select>
                <br><br>
                <button id="saveSettingsBtn">Save Settings</button>
            </div>
        </div>
        <audio id="endSound">
            <source src="bell.mp3" type="audio/mpeg">
            Your browser does not support the audio element.
        </audio>
    </div>
    <script src="script.js"></script>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #f0f0f0;
}

.container {
    text-align: center;
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

h1 {
    margin-bottom: 20px;
    font-size: 2em;
    color: #333;
}

#timer {
    font-size: 3em;
    margin-bottom: 20px;
    color: #333;
}

.buttons button {
    padding: 10px 20px;
    margin: 5px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    color: white;
}

#startBtn {
    background-color: #28a745;
}

#pauseBtn {
    background-color: #ffc107;
}

#resetBtn {
    background-color: #dc3545;
}

.time-settings {
    margin-bottom: 20px;
}

.time-settings label {
    margin-right: 10px;
    font-size: 1em;
    color: #555;
}

.time-settings input {
    width: 50px;
    padding: 5px;
    margin-right: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

#progressBarContainer {
    width: 100%;
    margin: 20px 0;
}

#progressBar {
    width: 100%;
    height: 20px;
    border-radius: 5px;
    overflow: hidden;
}

#logContainer {
    margin-top: 20px;
    text-align: left;
}

#logContainer h2 {
    font-size: 1.5em;
    color: #333;
}

#logList {
    list-style-type: none;
    padding: 0;
    max-height: 150px;
    overflow-y: auto;
    border-top: 1px solid #ccc;
    margin-top: 10px;
    padding-top: 10px;
}

#logList li {
    margin-bottom: 10px;
    font-size: 1em;
    color: #555;
}

#settingsBtn {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    margin: 10px;
    border-radius: 5px;
    cursor: pointer;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
    padding-top: 60px;
}

.modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 500px;
    border-radius: 10px;
}

.closeBtn {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.closeBtn:hover,
.closeBtn:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

#notification {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    display: none;
    z-index: 1000;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

body.dark-mode {
    background-color: #121212;
    color: white;
}

body.dark-mode .container {
    background-color: #333;
}

body.dark-mode .buttons button {
    color: black;
}

body.dark-mode #timer {
    color: white;
}

body.dark-mode .modal-content {
    background-color: #444;
    color: white;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
let timer;
let timeLeft;
let isRunning = false;

const timerElement = document.getElementById('timer');
const startBtn = document.getElementById('startBtn');
const pauseBtn = document.getElementById('pauseBtn');
const resetBtn = document.getElementById('resetBtn');
const studyTimeInput = document.getElementById('studyTime');
const breakTimeInput = document.getElementById('breakTime');
const endSound = document.getElementById('endSound');
const progressBar = document.getElementById('progressBar');
const logList = document.getElementById('logList');
const notificationElement = document.getElementById('notification');

const settingsBtn = document.getElementById('settingsBtn');
const settingsModal = document.getElementById('settingsModal');
const closeBtn = document.querySelector('.closeBtn');
const soundSelect = document.getElementById('soundSelect');
const themeSelect = document.getElementById('themeSelect');
const saveSettingsBtn = document.getElementById('saveSettingsBtn');

function updateTimerDisplay() {
    let minutes = Math.floor(timeLeft / 60);
    let seconds = timeLeft % 60;
    timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    let totalSeconds = parseInt(studyTimeInput.value) * 60;
    let progress = ((totalSeconds - timeLeft) / totalSeconds) * 100;
    progressBar.value = progress;
}

function startTimer() {
    if (!isRunning) {
        isRunning = true;
        let studyMinutes = parseInt(studyTimeInput.value);
        timeLeft = studyMinutes * 60;
        progressBar.max = timeLeft;
        timer = setInterval(() => {
            if (timeLeft > 0) {
                timeLeft--;
                updateTimerDisplay();
            } else {
                clearInterval(timer);
                endSound.play();
                logSession('Study', studyMinutes);
                displayNotification('Study session over! Time for a break.');
                startBreakTimer();
            }
        }, 1000);
    }
}

function startBreakTimer() {
    let breakMinutes = parseInt(breakTimeInput.value);
    timeLeft = breakMinutes * 60;
    progressBar.max = timeLeft;
    isRunning = true;

    timer = setInterval(() => {
        if (timeLeft > 0) {
            timeLeft--;
            updateTimerDisplay();
        } else {
            clearInterval(timer);
            endSound.play();
            logSession('Break', breakMinutes);
            displayNotification('Break time is over! Time to get back to studying.');
            isRunning = false;
        }
    }, 1000);
}

function pauseTimer() {
    if (isRunning) {
        clearInterval(timer);
        isRunning = false;
    }
}

function resetTimer() {
    clearInterval(timer);
    isRunning = false;
    let studyMinutes = parseInt(studyTimeInput.value);
    timeLeft = studyMinutes * 60;
    updateTimerDisplay();
    progressBar.value = 0;
}

function logSession(type, minutes) {
    let logEntry = document.createElement('li');
    logEntry.textContent = `${type} session of ${minutes} minutes completed at ${new Date().toLocaleTimeString()}`;
    logList.appendChild(logEntry);
}

function displayNotification(message) {
    notificationElement.textContent = message;
    notificationElement.style.display = 'block';
    setTimeout(() => {
        notificationElement.style.display = 'none';
    }, 3000);
}

function loadSettings() {
    const sound = localStorage.getItem('notificationSound') || 'bell.mp3';
    const theme = localStorage.getItem('theme') || 'light';
    
    soundSelect.value = sound;
    themeSelect.value = theme;
    
    document.body.className = theme === 'dark' ? 'dark-mode' : '';
    endSound.src = sound;
}

function saveSettings() {
    const sound = soundSelect.value;
    const theme = themeSelect.value;
    
    localStorage.setItem('notificationSound', sound);
    localStorage.setItem('theme', theme);
    
    endSound.src = sound;
    document.body.className = theme === 'dark' ? 'dark-mode' : '';
}

startBtn.addEventListener('click', startTimer);
pauseBtn.addEventListener('click', pauseTimer);
resetBtn.addEventListener('click', resetTimer);

settingsBtn.addEventListener('click', () => {
    settingsModal.style.display = 'block';
});

closeBtn.addEventListener('click', () => {
    settingsModal.style.display = 'none';
});

saveSettingsBtn.addEventListener('click', () => {
    saveSettings();
    settingsModal.style.display = 'none';
});

window.addEventListener('load', loadSettings);

TWO=========================================================================================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Study Timer</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>Study Timer</h1>
        <div class="time-settings">
            <label for="studyTime">Study Time (minutes):</label>
            <input type="number" id="studyTime" value="25" min="1" max="120">
            <label for="breakTime">Break Time (minutes):</label>
            <input type="number" id="breakTime" value="5" min="1" max="60">
        </div>
        <div id="timer">25:00</div>
        <div id="progressBarContainer">
            <progress id="progressBar" value="0" max="100"></progress>
        </div>
        <div class="buttons">
            <button id="startBtn">Start</button>
            <button id="pauseBtn">Pause</button>
            <button id="resetBtn">Reset</button>
        </div>
        <div id="logContainer">
            <h2>Session Log</h2>
            <ul id="logList"></ul>
        </div>
        <button id="settingsBtn">Settings</button>
        <div id="notification"></div>
        <div id="settingsModal" class="modal">
            <div class="modal-content">
                <span class="closeBtn">&times;</span>
                <h2>Settings</h2>
                <label for="soundSelect">Notification Sound:</label>
                <select id="soundSelect">
                    <option value="bell.mp3">Bell</option>
                    <option value="chime.mp3">Chime</option>
                    <option value="alert.mp3">Alert</option>
                </select>
                <br><br>
                <label for="themeSelect">Theme:</label>
                <select id="themeSelect">
                    <option value="light">Light</option>
                    <option value="dark">Dark</option>
                </select>
                <br><br>
                <button id="saveSettingsBtn">Save Settings</button>
            </div>
        </div>
        <audio id="endSound">
            <source src="bell.mp3" type="audio/mpeg">
            Your browser does not support the audio element.
        </audio>
    </div>
    <script src="script.js"></script>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background-color: #f0f0f0;
}

.container {
    text-align: center;
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

h1 {
    margin-bottom: 20px;
    font-size: 2em;
    color: #333;
}

#timer {
    font-size: 3em;
    margin-bottom: 20px;
    color: #333;
}

.buttons button {
    padding: 10px 20px;
    margin: 5px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    color: white;
}

#startBtn {
    background-color: #28a745;
}

#pauseBtn {
    background-color: #ffc107;
}

#resetBtn {
    background-color: #dc3545;
}

.time-settings {
    margin-bottom: 20px;
}

.time-settings label {
    margin-right: 10px;
    font-size: 1em;
    color: #555;
}

.time-settings input {
    width: 50px;
    padding: 5px;
    margin-right: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

#progressBarContainer {
    width: 100%;
    margin: 20px 0;
}

#progressBar {
    width: 100%;
    height: 20px;
    border-radius: 5px;
    background-color: #e0e0e0;
    border: 1px solid #ccc;
    margin: 10px 0;
}

#progressBar::-webkit-progress-bar {
    background-color: #e0e0e0;
    border-radius: 5px;
}

#progressBar::-webkit-progress-value {
    background-color: #007bff;
    border-radius: 5px;
}

#progressBar::-moz-progress-bar {
    background-color: #007bff;
    border-radius: 5px;
}

#logContainer {
    margin-top: 20px;
    text-align: left;
}

#logContainer h2 {
    font-size: 1.5em;
    color: #333;
}

#logList {
    list-style-type: none;
    padding: 0;
    max-height: 150px;
    overflow-y: auto;
    border-top: 1px solid #ccc;
    margin-top: 10px;
    padding-top: 10px;
}

#logList li {
    margin-bottom: 10px;
    font-size: 1em;
    color: #555;
}

#settingsBtn {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    margin: 10px;
    border-radius: 5px;
    cursor: pointer;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0,0,0,0.4);
    padding-top: 60px;
}

.modal-content {
    background-color: #fefefe;
    margin: 5% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 500px;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.closeBtn {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
}

.closeBtn:hover,
.closeBtn:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
}

#notification {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #333;
    color: white;
    padding: 10px 20px;
    border-radius: 5px;
    display: none;
    z-index: 1000;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

body.dark-mode {
    background-color: #121212;
    color: white;
}

body.dark-mode .container {
    background-color: #333;
}

body.dark-mode .buttons button {
    color: black;
}

body.dark-mode #timer {
    color: white;
}

body.dark-mode .modal-content {
    background-color: #444;
    color: white;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
let timer;
let timeLeft;
let isRunning = false;

const timerElement = document.getElementById('timer');
const startBtn = document.getElementById('startBtn');
const pauseBtn = document.getElementById('pauseBtn');
const resetBtn = document.getElementById('resetBtn');
const studyTimeInput = document.getElementById('studyTime');
const breakTimeInput = document.getElementById('breakTime');
const endSound = document.getElementById('endSound');
const progressBar = document.getElementById('progressBar');
const logList = document.getElementById('logList');
const notificationElement = document.getElementById('notification');

const settingsBtn = document.getElementById('settingsBtn');
const settingsModal = document.getElementById('settingsModal');
const closeBtn = document.querySelector('.closeBtn');
const soundSelect = document.getElementById('soundSelect');
const themeSelect = document.getElementById('themeSelect');
const saveSettingsBtn = document.getElementById('saveSettingsBtn');

function updateTimerDisplay() {
    let minutes = Math.floor(timeLeft / 60);
    let seconds = timeLeft % 60;
    timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    let totalSeconds = parseInt(studyTimeInput.value) * 60;
    let progress = ((totalSeconds - timeLeft) / totalSeconds) * 100;
    progressBar.value = progress;
}

function startTimer() {
    if (!isRunning) {
        isRunning = true;
        let studyMinutes = parseInt(studyTimeInput.value);
        timeLeft = studyMinutes * 60;
        progressBar.max = timeLeft;
        timer = setInterval(() => {
            if (timeLeft > 0) {
                timeLeft--;
                updateTimerDisplay();
            } else {
                clearInterval(timer);
                endSound.play();
                logSession('Study', studyMinutes);
                displayNotification('Study session over! Time for a break.');
                startBreakTimer();
            }
        }, 1000);
    }
}

function startBreakTimer() {
    let breakMinutes = parseInt(breakTimeInput.value);
    timeLeft = breakMinutes * 60;
    progressBar.max = timeLeft;
    isRunning = true;

    timer = setInterval(() => {
        if (timeLeft > 0) {
            timeLeft--;
            updateTimerDisplay();
        } else {
            clearInterval(timer);
            endSound.play();
            logSession('Break', breakMinutes);
            displayNotification('Break time is over! Time to get back to studying.');
            isRunning = false;
        }
    }, 1000);
}

function pauseTimer() {
    if (isRunning) {
        clearInterval(timer);
        isRunning = false;
    }
}

function resetTimer() {
    clearInterval(timer);
    isRunning = false;
    let studyMinutes = parseInt(studyTimeInput.value);
    timeLeft = studyMinutes * 60;
    updateTimerDisplay();
    progressBar.value = 0;
}

function logSession(type, minutes) {
    let logEntry = document.createElement('li');
    logEntry.textContent = `${type} session of ${minutes} minutes completed at ${new Date().toLocaleTimeString()}`;
    logList.appendChild(logEntry);
}

function displayNotification(message) {
    notificationElement.textContent = message;
    notificationElement.style.display = 'block';
    setTimeout(() => {
        notificationElement.style.display = 'none';
    }, 3000);
}

function loadSettings() {
    const sound = localStorage.getItem('notificationSound') || 'bell.mp3';
    const theme = localStorage.getItem('theme') || 'light';
    
    soundSelect.value = sound;
    themeSelect.value = theme;
    
    document.body.className = theme === 'dark' ? 'dark-mode' : '';
    endSound.src = sound;
}

function saveSettings() {
    const sound = soundSelect.value;
    const theme = themeSelect.value;
    
    localStorage.setItem('notificationSound', sound);
    localStorage.setItem('theme', theme);
    
    endSound.src = sound;
    document.body.className = theme === 'dark' ? 'dark-mode' : '';
}

startBtn.addEventListener('click', startTimer);
pauseBtn.addEventListener('click', pauseTimer);
resetBtn.addEventListener('click', resetTimer);

settingsBtn.addEventListener('click', () => {
    settingsModal.classList.add('show');
    settingsModal.classList.remove('hide');
});

closeBtn.addEventListener('click', () => {
    settingsModal.classList.add('hide');
    settingsModal.classList.remove('show');
});

saveSettingsBtn.addEventListener('click', () => {
    saveSettings();
    settingsModal.classList.add('hide');
    settingsModal.classList.remove('show');
});

window.addEventListener('load', loadSettings);

THREE========================================================================================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Study Timer</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="container">
        <header>
            <h1>Study Timer</h1>
        </header>
        <main>
            <section id="timerSection">
                <div id="timer">00:00</div>
                <input type="number" id="studyTime" placeholder="Study Time (min)" min="1" value="30">
                <input type="number" id="breakTime" placeholder="Break Time (min)" min="1" value="5">
                <button id="startBtn">Start</button>
                <button id="pauseBtn">Pause</button>
                <button id="resetBtn">Reset</button>
                <progress id="progressBar" value="0" max="100"></progress>
                <audio id="endSound" src="bell.mp3" preload="auto"></audio>
                <div id="notification"></div>
            </section>
            <section id="progressContainer">
                <h2>Progress</h2>
                <div id="totalStudyTime">Total Study Time: 0 minutes</div>
                <div id="totalBreakTime">Total Break Time: 0 minutes</div>
                <ul id="progressLog"></ul>
                <button id="clearLogBtn">Clear Log</button>
            </section>
            <section id="logSection">
                <h2>Session Log</h2>
                <ul id="logList"></ul>
            </section>
        </main>
        <footer>
            <button id="settingsBtn">Settings</button>
        </footer>
    </div>

    <!-- Settings Modal -->
    <div id="settingsModal" class="modal hide">
        <div class="modal-content">
            <span class="closeBtn">&times;</span>
            <h2>Settings</h2>
            <label for="soundSelect">Notification Sound:</label>
            <select id="soundSelect">
                <option value="bell.mp3">Bell</option>
                <option value="chime.mp3">Chime</option>
                <option value="beep.mp3">Beep</option>
            </select>
            <label for="themeSelect">Theme:</label>
            <select id="themeSelect">
                <option value="light">Light</option>
                <option value="dark">Dark</option>
            </select>
            <button id="saveSettingsBtn">Save</button>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background-color: #f0f0f0;
}

#container {
    width: 90%;
    max-width: 800px;
    margin: auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

header {
    text-align: center;
}

#timerSection {
    text-align: center;
    margin-bottom: 20px;
}

#timer {
    font-size: 2em;
    margin-bottom: 10px;
}

input[type="number"] {
    width: 100px;
    padding: 5px;
    margin: 0 5px;
    font-size: 1em;
}

button {
    padding: 10px 20px;
    font-size: 1em;
    margin: 5px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    background-color: #007bff;
    color: white;
}

button:hover {
    background-color: #0056b3;
}

progress {
    width: 100%;
    height: 20px;
    margin: 10px 0;
}

#notification {
    margin-top: 10px;
    color: #007bff;
}

#progressContainer {
    margin-top: 20px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #f9f9f9;
}

#progressContainer h2 {
    font-size: 1.5em;
    color: #333;
}

#totalStudyTime,
#totalBreakTime {
    font-size: 1.2em;
    color: #555;
}

#progressLog {
    list-style-type: none;
    padding: 0;
    max-height: 200px;
    overflow-y: auto;
    margin-top: 10px;
}

#progressLog li {
    margin-bottom: 10px;
    font-size: 1em;
    color: #555;
}

#clearLogBtn {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    margin-top: 10px;
}

footer {
    text-align: center;
    margin-top: 20px;
}

.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-content {
    background: #fff;
    padding: 20px;
    border-radius: 8px;
    position: relative;
    width: 300px;
}

.closeBtn {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 1.5em;
    cursor: pointer;
}

.hide {
    display: none;
}

.show {
    display: block;
}

.dark-mode {
    background-color: #333;
    color: #fff;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
let timer;
let timeLeft;
let isRunning = false;
let totalStudyTime = 0;
let totalBreakTime = 0;

const timerElement = document.getElementById('timer');
const startBtn = document.getElementById('startBtn');
const pauseBtn = document.getElementById('pauseBtn');
const resetBtn = document.getElementById('resetBtn');
const studyTimeInput = document.getElementById('studyTime');
const breakTimeInput = document.getElementById('breakTime');
const endSound = document.getElementById('endSound');
const progressBar = document.getElementById('progressBar');
const logList = document.getElementById('logList');
const notificationElement = document.getElementById('notification');

const settingsBtn = document.getElementById('settingsBtn');
const settingsModal = document.getElementById('settingsModal');
const closeBtn = document.querySelector('.closeBtn');
const soundSelect = document.getElementById('soundSelect');
const themeSelect = document.getElementById('themeSelect');
const saveSettingsBtn = document.getElementById('saveSettingsBtn');

const totalStudyTimeElement = document.getElementById('totalStudyTime');
const totalBreakTimeElement = document.getElementById('totalBreakTime');
const progressLog = document.getElementById('progressLog');
const clearLogBtn = document.getElementById('clearLogBtn');

function updateTimerDisplay() {
    let minutes = Math.floor(timeLeft / 60);
    let seconds = timeLeft % 60;
    timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    let totalSeconds = parseInt(studyTimeInput.value) * 60;
    let progress = ((totalSeconds - timeLeft) / totalSeconds) * 100;
    progressBar.value = progress;
}

function startTimer() {
    if (!isRunning) {
        isRunning = true;
        let studyMinutes = parseInt(studyTimeInput.value);
        timeLeft = studyMinutes * 60;
        progressBar.max = timeLeft;
        timer = setInterval(() => {
            if (timeLeft > 0) {
                timeLeft--;
                updateTimerDisplay();
            } else {
                clearInterval(timer);
                endSound.play();
                logSession('Study', studyMinutes);
                totalStudyTime += studyMinutes;
                displayNotification('Study session over! Time for a break.');
                startBreakTimer();
            }
        }, 1000);
    }
}

function startBreakTimer() {
    let breakMinutes = parseInt(breakTimeInput.value);
    timeLeft = breakMinutes * 60;
    progressBar.max = timeLeft;
    isRunning = true;

    timer = setInterval(() => {
        if (timeLeft > 0) {
            timeLeft--;
            updateTimerDisplay();
        } else {
            clearInterval(timer);
            endSound.play();
            logSession('Break', breakMinutes);
            totalBreakTime += breakMinutes;
            displayNotification('Break time is over! Time to get back to studying.');
            isRunning = false;
        }
    }, 1000);
}

function pauseTimer() {
    if (isRunning) {
        clearInterval(timer);
        isRunning = false;
    }
}

function resetTimer() {
    clearInterval(timer);
    isRunning = false;
    let studyMinutes = parseInt(studyTimeInput.value);
    timeLeft = studyMinutes * 60;
    updateTimerDisplay();
    progressBar.value = 0;
}

function logSession(type, minutes) {
    let logEntry = document.createElement('li');
    logEntry.textContent = `${type} session of ${minutes} minutes completed at ${new Date().toLocaleTimeString()}`;
    logList.appendChild(logEntry);

    let progressEntry = document.createElement('li');
    progressEntry.textContent = `${type} - ${minutes} minutes on ${new Date().toLocaleDateString()}`;
    progressLog.appendChild(progressEntry);

    updateProgressDisplay();
}

function displayNotification(message) {
    notificationElement.textContent = message;
    notificationElement.style.display = 'block';
    setTimeout(() => {
        notificationElement.style.display = 'none';
    }, 3000);
}

function updateProgressDisplay() {
    totalStudyTimeElement.textContent = `Total Study Time: ${totalStudyTime} minutes`;
    totalBreakTimeElement.textContent = `Total Break Time: ${totalBreakTime} minutes`;
}

function loadSettings() {
    const sound = localStorage.getItem('notificationSound') || 'bell.mp3';
    const theme = localStorage.getItem('theme') || 'light';
    
    soundSelect.value = sound;
    themeSelect.value = theme;
    
    document.body.className = theme === 'dark' ? 'dark-mode' : '';
    endSound.src = sound;
}

function saveSettings() {
    const sound = soundSelect.value;
    const theme = themeSelect.value;
    
    localStorage.setItem('notificationSound', sound);
    localStorage.setItem('theme', theme);
    
    endSound.src = sound;
    document.body.className = theme === 'dark' ? 'dark-mode' : '';
}

function clearLog() {
    logList.innerHTML = '';
    progressLog.innerHTML = '';
    totalStudyTime = 0;
    totalBreakTime = 0;
    updateProgressDisplay();
}

startBtn.addEventListener('click', startTimer);
pauseBtn.addEventListener('click', pauseTimer);
resetBtn.addEventListener('click', resetTimer);
clearLogBtn.addEventListener('click', clearLog);

settingsBtn.addEventListener('click', () => {
    settingsModal.classList.add('show');
    settingsModal.classList.remove('hide');
});

closeBtn.addEventListener('click', () => {
    settingsModal.classList.add('hide');
    settingsModal.classList.remove('show');
});

saveSettingsBtn.addEventListener('click', () => {
    saveSettings();
    settingsModal.classList.add('hide');
    settingsModal.classList.remove('show');
});

window.addEventListener('load', loadSettings);
updateProgressDisplay(); // Initial update

FOUR========================================================================================================================================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Study Timer</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="container">
        <header>
            <h1>Study Timer</h1>
        </header>
        <main>
            <section id="authSection">
                <h2>Authentication</h2>
                <input type="text" id="username" placeholder="Username">
                <input type="password" id="password" placeholder="Password">
                <button id="loginBtn">Login</button>
                <button id="registerBtn">Register</button>
                <div id="authMessage"></div>
            </section>
            <section id="timerSection" class="hidden">
                <div id="timer">00:00</div>
                <input type="number" id="studyTime" placeholder="Study Time (min)" min="1" value="30">
                <input type="number" id="breakTime" placeholder="Break Time (min)" min="1" value="5">
                <button id="startBtn">Start</button>
                <button id="pauseBtn">Pause</button>
                <button id="resetBtn">Reset</button>
                <progress id="progressBar" value="0" max="100"></progress>
                <audio id="endSound" src="bell.mp3" preload="auto"></audio>
                <div id="notification"></div>
            </section>
            <section id="progressContainer" class="hidden">
                <h2>Progress</h2>
                <div id="totalStudyTime">Total Study Time: 0 minutes</div>
                <div id="totalBreakTime">Total Break Time: 0 minutes</div>
                <ul id="progressLog"></ul>
                <button id="clearLogBtn">Clear Log</button>
            </section>
            <section id="logSection" class="hidden">
                <h2>Session Log</h2>
                <ul id="logList"></ul>
            </section>
        </main>
        <footer>
            <button id="settingsBtn">Settings</button>
        </footer>
    </div>

    <!-- Settings Modal -->
    <div id="settingsModal" class="modal hide">
        <div class="modal-content">
            <span class="closeBtn">&times;</span>
            <h2>Settings</h2>
            <label for="soundSelect">Notification Sound:</label>
            <select id="soundSelect">
                <option value="bell.mp3">Bell</option>
                <option value="chime.mp3">Chime</option>
                <option value="beep.mp3">Beep</option>
            </select>
            <label for="themeSelect">Theme:</label>
            <select id="themeSelect">
                <option value="light">Light</option>
                <option value="dark">Dark</option>
            </select>
            <button id="saveSettingsBtn">Save</button>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Base styles */
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

#container {
    width: 80%;
    margin: 0 auto;
    padding: 20px;
}

header, footer {
    text-align: center;
    margin-bottom: 20px;
}

main {
    display: flex;
    flex-direction: column;
    align-items: center;
}

button {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
    font-size: 1em;
    cursor: pointer;
    margin: 10px;
}

button:hover {
    background-color: #0056b3;
}

input {
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    margin: 5px;
}

progress {
    width: 100%;
    height: 20px;
    margin: 10px 0;
}

.hidden {
    display: none;
}

#settingsModal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
}

.modal-content {
    background: white;
    padding: 20px;
    border-radius: 5px;
    width: 300px;
    text-align: center;
}

.closeBtn {
    position: absolute;
    top: 10px;
    right: 10px;
    cursor: pointer;
}

.dark-mode {
    background-color: #333;
    color: white;
}

.dark-mode button {
    background-color: #555;
}

.dark-mode input {
    background-color: #444;
    color: white;
    border: 1px solid #666;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
let timer;
let timeLeft;
let isRunning = false;
let totalStudyTime = 0;
let totalBreakTime = 0;

const timerElement = document.getElementById('timer');
const startBtn = document.getElementById('startBtn');
const pauseBtn = document.getElementById('pauseBtn');
const resetBtn = document.getElementById('resetBtn');
const studyTimeInput = document.getElementById('studyTime');
const breakTimeInput = document.getElementById('breakTime');
const endSound = document.getElementById('endSound');
const progressBar = document.getElementById('progressBar');
const logList = document.getElementById('logList');
const notificationElement = document.getElementById('notification');

const settingsBtn = document.getElementById('settingsBtn');
const settingsModal = document.getElementById('settingsModal');
const closeBtn = document.querySelector('.closeBtn');
const soundSelect = document.getElementById('soundSelect');
const themeSelect = document.getElementById('themeSelect');
const saveSettingsBtn = document.getElementById('saveSettingsBtn');

const totalStudyTimeElement = document.getElementById('totalStudyTime');
const totalBreakTimeElement = document.getElementById('totalBreakTime');
const progressLog = document.getElementById('progressLog');
const clearLogBtn = document.getElementById('clearLogBtn');

const authSection = document.getElementById('authSection');
const timerSection = document.getElementById('timerSection');
const progressContainer = document.getElementById('progressContainer');
const logSection = document.getElementById('logSection');
const authMessage = document.getElementById('authMessage');
const loginBtn = document.getElementById('loginBtn');
const registerBtn = document.getElementById('registerBtn');
const usernameInput = document.getElementById('username');
const passwordInput = document.getElementById('password');

function updateTimerDisplay() {
    let minutes = Math.floor(timeLeft / 60);
    let seconds = timeLeft % 60;
    timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    let totalSeconds = parseInt(studyTimeInput.value) * 60;
    let progress = ((totalSeconds - timeLeft) / totalSeconds) * 100;
    progressBar.value = progress;
}

function startTimer() {
    if (!isRunning) {
        isRunning = true;
        let studyMinutes = parseInt(studyTimeInput.value);
        timeLeft = studyMinutes * 60;
        progressBar.max = timeLeft;
        timer = setInterval(() => {
            if (timeLeft > 0) {
                timeLeft--;
                updateTimerDisplay();
            } else {
                clearInterval(timer);
                endSound.play();
                logSession('Study', studyMinutes);
                totalStudyTime += studyMinutes;
                displayNotification('Study session over! Time for a break.');
                startBreakTimer();
            }
        }, 1000);
    }
}

function startBreakTimer() {
    let breakMinutes = parseInt(breakTimeInput.value);
    timeLeft = breakMinutes * 60;
    progressBar.max = timeLeft;
    isRunning = true;

    timer = setInterval(() => {
        if (timeLeft > 0) {
            timeLeft--;
            updateTimerDisplay();
        } else {
            clearInterval(timer);
            endSound.play();
            logSession('Break', breakMinutes);
            totalBreakTime += breakMinutes;
            displayNotification('Break time is over! Time to get back to studying.');
            isRunning = false;
        }
    }, 1000);
}

function pauseTimer() {
    if (isRunning) {
        clearInterval(timer);
        isRunning = false;
    }
}

function resetTimer() {
    clearInterval(timer);
    isRunning = false;
    let studyMinutes = parseInt(studyTimeInput.value);
    timeLeft = studyMinutes * 60;
    updateTimerDisplay();
    progressBar.value = 0;
}

function logSession(type, minutes) {
    const listItem = document.createElement('li');
    listItem.textContent = `${type} session of ${minutes} minutes`;
    logList.appendChild(listItem);
    progressLog.innerHTML += `<li>${type} session of ${minutes} minutes</li>`;
    updateProgressDisplay();
}

function displayNotification(message) {
    notificationElement.textContent = message;
    setTimeout(() => notificationElement.textContent = '', 3000);
}

function updateProgressDisplay() {
    totalStudyTimeElement.textContent = `Total Study Time: ${totalStudyTime} minutes`;
    totalBreakTimeElement.textContent = `Total Break Time: ${totalBreakTime} minutes`;
}

function loadSettings() {
    const sound = localStorage.getItem('notificationSound') || 'bell.mp3';
    const theme = localStorage.getItem('theme') || 'light';
    
    soundSelect.value = sound;
    themeSelect.value = theme;
    
    document.body.className = theme === 'dark' ? 'dark-mode' : '';
    endSound.src = sound;
}

function saveSettings() {
    const sound = soundSelect.value;
    const theme = themeSelect.value;
    
    localStorage.setItem('notificationSound', sound);
    localStorage.setItem('theme', theme);
    
    endSound.src = sound;
    document.body.className = theme === 'dark' ? 'dark-mode' : '';
}

function clearLog() {
    logList.innerHTML = '';
    progressLog.innerHTML = '';
    totalStudyTime = 0;
    totalBreakTime = 0;
    updateProgressDisplay();
}

function authenticateUser(username, password) {
    let users = JSON.parse(localStorage.getItem('users')) || {};
    return users[username] === password;
}

function registerUser(username, password) {
    let users = JSON.parse(localStorage.getItem('users')) || {};
    if (users[username]) {
        return false; // User already exists
    }
    users[username] = password;
    localStorage.setItem('users', JSON.stringify(users));
    return true;
}

function handleAuthentication(action) {
    const username = usernameInput.value;
    const password = passwordInput.value;

    if (!username || !password) {
        authMessage.textContent = 'Please enter both username and password.';
        return;
    }

    if (action === 'login') {
        if (authenticateUser(username, password)) {
            authSection.classList.add('hidden');
            timerSection.classList.remove('hidden');
            progressContainer.classList.remove('hidden');
            logSection.classList.remove('hidden');
            authMessage.textContent = 'Login successful!';
        } else {
            authMessage.textContent = 'Invalid username or password.';
        }
    } else if (action === 'register') {
        if (registerUser(username, password)) {
            authMessage.textContent = 'Registration successful! You can now log in.';
        } else {
            authMessage.textContent = 'Username already exists.';
        }
    }
}

startBtn.addEventListener('click', startTimer);
pauseBtn.addEventListener('click', pauseTimer);
resetBtn.addEventListener('click', resetTimer);
clearLogBtn.addEventListener('click', clearLog);

settingsBtn.addEventListener('click', () => {
    settingsModal.classList.add('show');
    settingsModal.classList.remove('hide');
});

closeBtn.addEventListener('click', () => {
    settingsModal.classList.add('hide');
    settingsModal.classList.remove('show');
});

saveSettingsBtn.addEventListener('click', () => {
    saveSettings();
    settingsModal.classList.add('hide');
    settingsModal.classList.remove('show');
});

loginBtn.addEventListener('click', () => handleAuthentication('login'));
registerBtn.addEventListener('click', () => handleAuthentication('register'));

window.addEventListener('load', loadSettings);
updateProgressDisplay(); // Initial update
